AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  This template creates a Multi-AZ, multi-subnet VPC infrastructure with managed NAT
  gateways in the public subnet for each Availability Zone. You can also create additional
  private subnets with dedicated custom network access control lists (ACLs). 
  **WARNING** This template creates AWS resources. You will
  be billed for the AWS resources used if you create a stack from this template. QS(0027)
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Availability Zone Configuration
        Parameters:
          - AvailabilityZones
          - NumberOfAZs
      - Label:
          default: Network Configuration
        Parameters:
          - VPCCIDR
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
          - PublicSubnet3CIDR
          - PublicSubnet4CIDR
          - PublicSubnetTag1
          - PublicSubnetTag2
          - PublicSubnetTag3
          - CreatePrivateSubnets
          - PrivateSubnet1CIDR
          - PrivateSubnet2CIDR
          - PrivateSubnet3CIDR
          - PrivateSubnet4CIDR
          - PrivateSubnetTag1
          - PrivateSubnetTag2
          - PrivateSubnetTag3
          - CreateAdditionalPrivateSubnets
          - VPCTenancy
      - Label:
          default: 'Deprecated: NAT Instance Configuration'
        Parameters:
          - KeyPairName
          - NATInstanceType
    ParameterLabels:
      AvailabilityZones:
        default: Availability Zones
      CreateAdditionalPrivateSubnets:
        default: Create additional private subnets with dedicated network ACLs
      CreatePrivateSubnets:
        default: Create private subnets
      NumberOfAZs:
        default: Number of Availability Zones
      PrivateSubnet1CIDR:
        default: Private subnet 1 CIDR
      PrivateSubnet2CIDR:
        default: Private subnet 2 CIDR
      PrivateSubnet3CIDR:
        default: Private subnet 3 CIDR
      PrivateSubnet4CIDR:
        default: Private subnet 4 CIDR
      PrivateSubnetTag1:
        default: Tag for Private Subnets 1
      PrivateSubnetTag2:
        default: Tag for Private Subnets 2
      PrivateSubnetTag3:
        default: Tag for Private Subnets 3
      PrivateSubnetTag4:
        default: Tag for Private Subnets 4
      PublicSubnet1CIDR:
        default: Public subnet 1 CIDR
      PublicSubnet2CIDR:
        default: Public subnet 2 CIDR
      PublicSubnet3CIDR:
        default: Public subnet 3 CIDR
      PublicSubnet4CIDR:
        default: Public subnet 4 CIDR
      PublicSubnetTag1:
        default: Tag for Public Subnets
      PublicSubnetTag2:
        default: Tag for Public Subnets
      PublicSubnetTag3:
        default: Tag for Public Subnets
      VPCCIDR:
        default: VPC CIDR
      VPCTenancy:
        default: VPC Tenancy
Parameters:
  AvailabilityZones:
    Description: 'List of Availability Zones to use for the subnets in the VPC. Note:
      The logical order is preserved.'
    Type: List<AWS::EC2::AvailabilityZone::Name>
  CreateAdditionalPrivateSubnets:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'
    Description: >-
      Set to true to create a network ACL protected subnet in each Availability Zone.
      If false, the CIDR parameters for those subnets will be ignored. If true, it
      also requires that the 'Create private subnets' parameter is also true to have
      any effect.
    Type: String
  CreatePrivateSubnets:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
    Description: Set to false to create only public subnets. If false, the CIDR parameters
      for ALL private subnets will be ignored.
    Type: String
  NumberOfAZs:
    AllowedValues:
      - '2'
      - '3'
      - '4'
    Default: '2'
    Description: Number of Availability Zones to use in the VPC. This must match your
      selections in the list of Availability Zones parameter.
    Type: String
  PrivateSubnet1CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/19
    Description: CIDR block for private subnet 1 located in Availability Zone 1
    Type: String
  PrivateSubnet2CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.32.0/19
    Description: CIDR block for private subnet 2 located in Availability Zone 2
    Type: String
  PrivateSubnet3CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.64.0/19
    Description: CIDR block for private subnet 3 located in Availability Zone 3
    Type: String
  PrivateSubnet4CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.96.0/19
    Description: CIDR block for private subnet 4 located in Availability Zone 4
    Type: String
  PrivateSubnetTag1:
    AllowedPattern: ^([a-zA-Z0-9+\-._:/@]+=[a-zA-Z0-9+\-.,_:/@ *\\"'\[\]\{\}]*)?$
    ConstraintDescription: tags must be in format "Key=Value" keys can only contain
      [a-zA-Z0-9+\-._:/@], values can contain [a-zA-Z0-9+\-._:/@ *\\"'\[\]\{\}]
    Default: Network=Private
    Description: tag to add to private subnets, in format Key=Value (Optional)
    Type: String
  PrivateSubnetTag2:
    AllowedPattern: ^([a-zA-Z0-9+\-._:/@]+=[a-zA-Z0-9+\-.,_:/@ *\\"'\[\]\{\}]*)?$
    ConstraintDescription: tags must be in format "Key=Value" keys can only contain
      [a-zA-Z0-9+\-._:/@], values can contain [a-zA-Z0-9+\-._:/@ *\\"'\[\]\{\}]
    Default: ''
    Description: tag to add to private subnets, in format Key=Value (Optional)
    Type: String
  PrivateSubnetTag3:
    AllowedPattern: ^([a-zA-Z0-9+\-._:/@]+=[a-zA-Z0-9+\-.,_:/@ *\\"'\[\]\{\}]*)?$
    ConstraintDescription: tags must be in format "Key=Value" keys can only contain
      [a-zA-Z0-9+\-._:/@], values can contain [a-zA-Z0-9+\-._:/@ *\\"'\[\]\{\}]
    Default: ''
    Description: tag to add to private subnets, in format Key=Value (Optional)
    Type: String
  PublicSubnet1CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.128.0/20
    Description: CIDR block for the public DMZ subnet 1 located in Availability Zone
      1
    Type: String
  PublicSubnet2CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.144.0/20
    Description: CIDR block for the public DMZ subnet 2 located in Availability Zone
      2
    Type: String
  PublicSubnet3CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.160.0/20
    Description: CIDR block for the public DMZ subnet 3 located in Availability Zone
      3
    Type: String
  PublicSubnet4CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.176.0/20
    Description: CIDR block for the public DMZ subnet 4 located in Availability Zone
      4
    Type: String
  PublicSubnetTag1:
    AllowedPattern: ^([a-zA-Z0-9+\-._:/@]+=[a-zA-Z0-9+\-.,_:/@ *\\"'\[\]\{\}]*)?$
    ConstraintDescription: tags must be in format "Key=Value" keys can only contain
      [a-zA-Z0-9+\-._:/@], values can contain [a-zA-Z0-9+\-._:/@ *\\"'\[\]\{\}]
    Default: Network=Public
    Description: tag to add to public subnets, in format Key=Value (Optional)
    Type: String
  PublicSubnetTag2:
    AllowedPattern: ^([a-zA-Z0-9+\-._:/@]+=[a-zA-Z0-9+\-.,_:/@ *\\"'\[\]\{\}]*)?$
    ConstraintDescription: tags must be in format "Key=Value" keys can only contain
      [a-zA-Z0-9+\-._:/@], values can contain [a-zA-Z0-9+\-._:/@ *\\"'\[\]\{\}]
    Default: ''
    Description: tag to add to public subnets, in format Key=Value (Optional)
    Type: String
  PublicSubnetTag3:
    AllowedPattern: ^([a-zA-Z0-9+\-._:/@]+=[a-zA-Z0-9+\-.,_:/@ *\\"'\[\]\{\}]*)?$
    ConstraintDescription: tags must be in format "Key=Value" keys can only contain
      [a-zA-Z0-9+\-._:/@], values can contain [a-zA-Z0-9+\-._:/@ *\\"'\[\]\{\}]
    Default: ''
    Description: tag to add to public subnets, in format Key=Value (Optional)
    Type: String
  VPCCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC
    Type: String
  VPCTenancy:
    AllowedValues:
      - default
      - dedicated
    Default: default
    Description: The allowed tenancy of instances launched into the VPC
    Type: String
Conditions:
  3ZCondition: !Or
    - !Equals
      - !Ref 'NumberOfAZs'
      - '3'
    - !Condition '4ZCondition'
  4ZCondition: !Equals
    - !Ref 'NumberOfAZs'
    - '4'
  AdditionalPrivateSubnetsCondition: !And
    - !Equals
      - !Ref 'CreatePrivateSubnets'
      - 'true'
    - !Equals
      - !Ref 'CreateAdditionalPrivateSubnets'
      - 'true'
  AdditionalPrivateSubnets&3ZCondition: !And
    - !Condition 'AdditionalPrivateSubnetsCondition'
    - !Condition '3ZCondition'
  AdditionalPrivateSubnets&4ZCondition: !And
    - !Condition 'AdditionalPrivateSubnetsCondition'
    - !Condition '4ZCondition'
  GovCloudCondition: !Equals
    - !Ref 'AWS::Region'
    - us-gov-west-1
  NVirginiaRegionCondition: !Equals
    - !Ref 'AWS::Region'
    - us-east-1
  PrivateSubnetsCondition: !Equals
    - !Ref 'CreatePrivateSubnets'
    - 'true'
  PrivateSubnets&3ZCondition: !And
    - !Condition 'PrivateSubnetsCondition'
    - !Condition '3ZCondition'
  PrivateSubnets&4ZCondition: !And
    - !Condition 'PrivateSubnetsCondition'
    - !Condition '4ZCondition'
  PrivateSubnetTag1Condition: !Not
    - !Equals
      - !Ref 'PrivateSubnetTag1'
      - ''
  PrivateSubnetTag2Condition: !Not
    - !Equals
      - !Ref 'PrivateSubnetTag2'
      - ''
  PrivateSubnetTag3Condition: !Not
    - !Equals
      - !Ref 'PrivateSubnetTag3'
      - ''
  PublicSubnetTag1Condition: !Not
    - !Equals
      - !Ref 'PublicSubnetTag1'
      - ''
  PublicSubnetTag2Condition: !Not
    - !Equals
      - !Ref 'PublicSubnetTag2'
      - ''
  PublicSubnetTag3Condition: !Not
    - !Equals
      - !Ref 'PublicSubnetTag3'
      - ''
Resources:
  DHCPOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName: !If
        - NVirginiaRegionCondition
        - ec2.internal
        - !Sub '${AWS::Region}.compute.internal'
      DomainNameServers:
        - AmazonProvidedDNS
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref 'VPCCIDR'
      InstanceTenancy: !Ref 'VPCTenancy'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
  VPCDHCPOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      VpcId: !Ref 'VPC'
      DhcpOptionsId: !Ref 'DHCPOptions'
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
  PrivateSubnet1:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref 'PrivateSubnet1CIDR'
      AvailabilityZone: !Select
        - '0'
        - !Ref 'AvailabilityZones'
      Tags:
        - Key: Name
          Value: Private subnet 1
        - !If
          - PrivateSubnetTag1Condition
          - Key: !Select
              - '0'
              - !Split
                - '='
                - !Ref 'PrivateSubnetTag1'
            Value: !Select
              - '1'
              - !Split
                - '='
                - !Ref 'PrivateSubnetTag1'
          - !Ref 'AWS::NoValue'
        - !If
          - PrivateSubnetTag2Condition
          - Key: !Select
              - '0'
              - !Split
                - '='
                - !Ref 'PrivateSubnetTag2'
            Value: !Select
              - '1'
              - !Split
                - '='
                - !Ref 'PrivateSubnetTag2'
          - !Ref 'AWS::NoValue'
        - !If
          - PrivateSubnetTag3Condition
          - Key: !Select
              - '0'
              - !Split
                - '='
                - !Ref 'PrivateSubnetTag3'
            Value: !Select
              - '1'
              - !Split
                - '='
                - !Ref 'PrivateSubnetTag3'
          - !Ref 'AWS::NoValue'
  PrivateSubnet2:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref 'PrivateSubnet2CIDR'
      AvailabilityZone: !Select
        - '1'
        - !Ref 'AvailabilityZones'
      Tags:
        - Key: Name
          Value: Private subnet 2
        - !If
          - PrivateSubnetTag1Condition
          - Key: !Select
              - '0'
              - !Split
                - '='
                - !Ref 'PrivateSubnetTag1'
            Value: !Select
              - '1'
              - !Split
                - '='
                - !Ref 'PrivateSubnetTag1'
          - !Ref 'AWS::NoValue'
        - !If
          - PrivateSubnetTag2Condition
          - Key: !Select
              - '0'
              - !Split
                - '='
                - !Ref 'PrivateSubnetTag2'
            Value: !Select
              - '1'
              - !Split
                - '='
                - !Ref 'PrivateSubnetTag2'
          - !Ref 'AWS::NoValue'
        - !If
          - PrivateSubnetTag3Condition
          - Key: !Select
              - '0'
              - !Split
                - '='
                - !Ref 'PrivateSubnetTag3'
            Value: !Select
              - '1'
              - !Split
                - '='
                - !Ref 'PrivateSubnetTag3'
          - !Ref 'AWS::NoValue'
  PrivateSubnet3:
    Condition: PrivateSubnets&3ZCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref 'PrivateSubnet3CIDR'
      AvailabilityZone: !Select
        - '2'
        - !Ref 'AvailabilityZones'
      Tags:
        - Key: Name
          Value: Private subnet 3
        - !If
          - PrivateSubnetTag1Condition
          - Key: !Select
              - '0'
              - !Split
                - '='
                - !Ref 'PrivateSubnetTag1'
            Value: !Select
              - '1'
              - !Split
                - '='
                - !Ref 'PrivateSubnetTag1'
          - !Ref 'AWS::NoValue'
        - !If
          - PrivateSubnetTag2Condition
          - Key: !Select
              - '0'
              - !Split
                - '='
                - !Ref 'PrivateSubnetTag2'
            Value: !Select
              - '1'
              - !Split
                - '='
                - !Ref 'PrivateSubnetTag2'
          - !Ref 'AWS::NoValue'
        - !If
          - PrivateSubnetTag3Condition
          - Key: !Select
              - '0'
              - !Split
                - '='
                - !Ref 'PrivateSubnetTag3'
            Value: !Select
              - '1'
              - !Split
                - '='
                - !Ref 'PrivateSubnetTag3'
          - !Ref 'AWS::NoValue'
  PrivateSubnet4:
    Condition: PrivateSubnets&4ZCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref 'PrivateSubnet4CIDR'
      AvailabilityZone: !Select
        - '3'
        - !Ref 'AvailabilityZones'
      Tags:
        - Key: Name
          Value: Private subnet 4
        - !If
          - PrivateSubnetTag1Condition
          - Key: !Select
              - '0'
              - !Split
                - '='
                - !Ref 'PrivateSubnetTag1'
            Value: !Select
              - '1'
              - !Split
                - '='
                - !Ref 'PrivateSubnetTag1'
          - !Ref 'AWS::NoValue'
        - !If
          - PrivateSubnetTag2Condition
          - Key: !Select
              - '0'
              - !Split
                - '='
                - !Ref 'PrivateSubnetTag2'
            Value: !Select
              - '1'
              - !Split
                - '='
                - !Ref 'PrivateSubnetTag2'
          - !Ref 'AWS::NoValue'
        - !If
          - PrivateSubnetTag3Condition
          - Key: !Select
              - '0'
              - !Split
                - '='
                - !Ref 'PrivateSubnetTag3'
            Value: !Select
              - '1'
              - !Split
                - '='
                - !Ref 'PrivateSubnetTag3'
          - !Ref 'AWS::NoValue'
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref 'PublicSubnet1CIDR'
      AvailabilityZone: !Select
        - '0'
        - !Ref 'AvailabilityZones'
      Tags:
        - Key: Name
          Value: Public subnet 1
        - !If
          - PublicSubnetTag1Condition
          - Key: !Select
              - '0'
              - !Split
                - '='
                - !Ref 'PublicSubnetTag1'
            Value: !Select
              - '1'
              - !Split
                - '='
                - !Ref 'PublicSubnetTag1'
          - !Ref 'AWS::NoValue'
        - !If
          - PublicSubnetTag2Condition
          - Key: !Select
              - '0'
              - !Split
                - '='
                - !Ref 'PublicSubnetTag2'
            Value: !Select
              - '1'
              - !Split
                - '='
                - !Ref 'PublicSubnetTag2'
          - !Ref 'AWS::NoValue'
        - !If
          - PublicSubnetTag3Condition
          - Key: !Select
              - '0'
              - !Split
                - '='
                - !Ref 'PublicSubnetTag3'
            Value: !Select
              - '1'
              - !Split
                - '='
                - !Ref 'PublicSubnetTag3'
          - !Ref 'AWS::NoValue'
      MapPublicIpOnLaunch: true
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref 'PublicSubnet2CIDR'
      AvailabilityZone: !Select
        - '1'
        - !Ref 'AvailabilityZones'
      Tags:
        - Key: Name
          Value: Public subnet 2
        - !If
          - PublicSubnetTag1Condition
          - Key: !Select
              - '0'
              - !Split
                - '='
                - !Ref 'PublicSubnetTag1'
            Value: !Select
              - '1'
              - !Split
                - '='
                - !Ref 'PublicSubnetTag1'
          - !Ref 'AWS::NoValue'
        - !If
          - PublicSubnetTag2Condition
          - Key: !Select
              - '0'
              - !Split
                - '='
                - !Ref 'PublicSubnetTag2'
            Value: !Select
              - '1'
              - !Split
                - '='
                - !Ref 'PublicSubnetTag2'
          - !Ref 'AWS::NoValue'
        - !If
          - PublicSubnetTag3Condition
          - Key: !Select
              - '0'
              - !Split
                - '='
                - !Ref 'PublicSubnetTag3'
            Value: !Select
              - '1'
              - !Split
                - '='
                - !Ref 'PublicSubnetTag3'
          - !Ref 'AWS::NoValue'
      MapPublicIpOnLaunch: true
  PublicSubnet3:
    Condition: 3ZCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref 'PublicSubnet3CIDR'
      AvailabilityZone: !Select
        - '2'
        - !Ref 'AvailabilityZones'
      Tags:
        - Key: Name
          Value: Public subnet 3
        - !If
          - PublicSubnetTag1Condition
          - Key: !Select
              - '0'
              - !Split
                - '='
                - !Ref 'PublicSubnetTag1'
            Value: !Select
              - '1'
              - !Split
                - '='
                - !Ref 'PublicSubnetTag1'
          - !Ref 'AWS::NoValue'
        - !If
          - PublicSubnetTag2Condition
          - Key: !Select
              - '0'
              - !Split
                - '='
                - !Ref 'PublicSubnetTag2'
            Value: !Select
              - '1'
              - !Split
                - '='
                - !Ref 'PublicSubnetTag2'
          - !Ref 'AWS::NoValue'
        - !If
          - PublicSubnetTag3Condition
          - Key: !Select
              - '0'
              - !Split
                - '='
                - !Ref 'PublicSubnetTag3'
            Value: !Select
              - '1'
              - !Split
                - '='
                - !Ref 'PublicSubnetTag3'
          - !Ref 'AWS::NoValue'
      MapPublicIpOnLaunch: true
  PublicSubnet4:
    Condition: 4ZCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref 'PublicSubnet4CIDR'
      AvailabilityZone: !Select
        - '3'
        - !Ref 'AvailabilityZones'
      Tags:
        - Key: Name
          Value: Public subnet 4
        - !If
          - PublicSubnetTag1Condition
          - Key: !Select
              - '0'
              - !Split
                - '='
                - !Ref 'PublicSubnetTag1'
            Value: !Select
              - '1'
              - !Split
                - '='
                - !Ref 'PublicSubnetTag1'
          - !Ref 'AWS::NoValue'
        - !If
          - PublicSubnetTag2Condition
          - Key: !Select
              - '0'
              - !Split
                - '='
                - !Ref 'PublicSubnetTag2'
            Value: !Select
              - '1'
              - !Split
                - '='
                - !Ref 'PublicSubnetTag2'
          - !Ref 'AWS::NoValue'
        - !If
          - PublicSubnetTag3Condition
          - Key: !Select
              - '0'
              - !Split
                - '='
                - !Ref 'PublicSubnetTag3'
            Value: !Select
              - '1'
              - !Split
                - '='
                - !Ref 'PublicSubnetTag3'
          - !Ref 'AWS::NoValue'
      MapPublicIpOnLaunch: true
  PrivateSubnet1RouteTable:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: Private subnet 1
        - Key: Network
          Value: Private
  PrivateSubnet1Route:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'PrivateSubnet1RouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'NATGateway1'
  PrivateSubnet1RouteTableAssociation:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet1'
      RouteTableId: !Ref 'PrivateSubnet1RouteTable'
  PrivateSubnet2RouteTable:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: Private subnet 2
        - Key: Network
          Value: Private
  PrivateSubnet2Route:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'PrivateSubnet2RouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'NATGateway2'
  PrivateSubnet2RouteTableAssociation:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet2'
      RouteTableId: !Ref 'PrivateSubnet2RouteTable'
  PrivateSubnet3RouteTable:
    Condition: PrivateSubnets&3ZCondition
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: Private subnet 3
        - Key: Network
          Value: Private
  PrivateSubnet3Route:
    Condition: PrivateSubnets&3ZCondition
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'PrivateSubnet3RouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'NATGateway3'
  PrivateSubnet3RouteTableAssociation:
    Condition: PrivateSubnets&3ZCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet3'
      RouteTableId: !Ref 'PrivateSubnet3RouteTable'
  PrivateSubnet4RouteTable:
    Condition: PrivateSubnets&4ZCondition
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: Private subnet 4
        - Key: Network
          Value: Private
  PrivateSubnet4Route:
    Condition: PrivateSubnets&4ZCondition
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'PrivateSubnet4RouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'NATGateway4'
  PrivateSubnet4RouteTableAssociation:
    Condition: PrivateSubnets&4ZCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet4'
      RouteTableId: !Ref 'PrivateSubnet4RouteTable'
  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: Public Subnets
        - Key: Network
          Value: Public
  PublicSubnetRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'PublicSubnetRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet1'
      RouteTableId: !Ref 'PublicSubnetRouteTable'
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet2'
      RouteTableId: !Ref 'PublicSubnetRouteTable'
  PublicSubnet3RouteTableAssociation:
    Condition: 3ZCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet3'
      RouteTableId: !Ref 'PublicSubnetRouteTable'
  PublicSubnet4RouteTableAssociation:
    Condition: 4ZCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet4'
      RouteTableId: !Ref 'PublicSubnetRouteTable'
  NAT1EIP:
    Condition: PrivateSubnetsCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NAT2EIP:
    Condition: PrivateSubnetsCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NAT3EIP:
    Condition: PrivateSubnets&3ZCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NAT4EIP:
    Condition: PrivateSubnets&4ZCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NATGateway1:
    Condition: PrivateSubnetsCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NAT1EIP.AllocationId'
      SubnetId: !Ref 'PublicSubnet1'
  NATGateway2:
    Condition: PrivateSubnetsCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NAT2EIP.AllocationId'
      SubnetId: !Ref 'PublicSubnet2'
  NATGateway3:
    Condition: PrivateSubnets&3ZCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NAT3EIP.AllocationId'
      SubnetId: !Ref 'PublicSubnet3'
  NATGateway4:
    Condition: PrivateSubnets&4ZCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NAT4EIP.AllocationId'
      SubnetId: !Ref 'PublicSubnet4'
  S3VPCEndpoint:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: '*'
            Effect: Allow
            Resource: '*'
            Principal: '*'
      RouteTableIds:
        - !Ref 'PrivateSubnet1RouteTable'
        - !Ref 'PrivateSubnet2RouteTable'
        - !If
          - PrivateSubnets&3ZCondition
          - !Ref 'PrivateSubnet3RouteTable'
          - !Ref 'AWS::NoValue'
        - !If
          - PrivateSubnets&4ZCondition
          - !Ref 'PrivateSubnet4RouteTable'
          - !Ref 'AWS::NoValue'
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !Ref 'VPC'
Outputs:
  REGION:
    Description: Deployment Region
    Value: !Ref 'AWS::Region'
    Export:
      Name: !Sub '${AWS::StackName}-AWSRegion'
  NAT1EIP:
    Condition: PrivateSubnetsCondition
    Description: NAT 1 IP address
    Value: !Ref 'NAT1EIP'
    Export:
      Name: !Sub '${AWS::StackName}-NAT1EIP'
  NAT2EIP:
    Condition: PrivateSubnetsCondition
    Description: NAT 2 IP address
    Value: !Ref 'NAT2EIP'
    Export:
      Name: !Sub '${AWS::StackName}-NAT2EIP'
  NAT3EIP:
    Condition: PrivateSubnets&3ZCondition
    Description: NAT 3 IP address
    Value: !Ref 'NAT3EIP'
    Export:
      Name: !Sub '${AWS::StackName}-NAT3EIP'
  NAT4EIP:
    Condition: PrivateSubnets&4ZCondition
    Description: NAT 4 IP address
    Value: !Ref 'NAT4EIP'
    Export:
      Name: !Sub '${AWS::StackName}-NAT4EIP'
  PrivateSubnet1CIDR:
    Condition: PrivateSubnetsCondition
    Description: Private subnet 1 CIDR in Availability Zone 1
    Value: !Ref 'PrivateSubnet1CIDR'
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnet1CIDR'
  PrivateSubnet1ID:
    Condition: PrivateSubnetsCondition
    Description: Private subnet 1 ID in Availability Zone 1
    Value: !Ref 'PrivateSubnet1'
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnet1ID'
  PrivateSubnet1AZ:
    Condition: PrivateSubnetsCondition
    Description: Private subnet 1 Availability Zone
    Value: !Select
      - '0'
      - !Ref 'AvailabilityZones'
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnet1AZ'
  PrivateSubnet2CIDR:
    Condition: PrivateSubnetsCondition
    Description: Private subnet 2 CIDR in Availability Zone 2
    Value: !Ref 'PrivateSubnet2CIDR'
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnet2CIDR'
  PrivateSubnet2ID:
    Condition: PrivateSubnetsCondition
    Description: Private subnet 2 ID in Availability Zone 2
    Value: !Ref 'PrivateSubnet2'
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnet2ID'
  PrivateSubnet2AZ:
    Condition: PrivateSubnetsCondition
    Description: Private subnet 2 Availability Zone
    Value: !Select
      - '1'
      - !Ref 'AvailabilityZones'
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnet2AZ'
  PrivateSubnet3CIDR:
    Condition: PrivateSubnets&3ZCondition
    Description: Private subnet 3 CIDR in Availability Zone 3
    Value: !Ref 'PrivateSubnet3CIDR'
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnet3CIDR'
  PrivateSubnet3ID:
    Condition: PrivateSubnets&3ZCondition
    Description: Private subnet 3 ID in Availability Zone 3
    Value: !Ref 'PrivateSubnet3'
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnet3ID'
  PrivateSubnet3AZ:
    Condition: PrivateSubnets&3ZCondition
    Description: Private subnet 3 Availability Zone
    Value: !Select
      - '2'
      - !Ref 'AvailabilityZones'
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnet3AZ'
  PrivateSubnet4CIDR:
    Condition: PrivateSubnets&4ZCondition
    Description: Private subnet 4 CIDR in Availability Zone 4
    Value: !Ref 'PrivateSubnet4CIDR'
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnet4CIDR'
  PrivateSubnet4ID:
    Condition: PrivateSubnets&4ZCondition
    Description: Private subnet 4 ID in Availability Zone 4
    Value: !Ref 'PrivateSubnet4'
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnet4ID'
  PrivateSubnet4AZ:
    Condition: PrivateSubnets&4ZCondition
    Description: Private subnet 4 Availability Zone
    Value: !Select
      - '3'
      - !Ref 'AvailabilityZones'
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnet4AZ'
  PublicSubnet1CIDR:
    Description: Public subnet 1 CIDR in Availability Zone 1
    Value: !Ref 'PublicSubnet1CIDR'
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet1CIDR'
  PublicSubnet1ID:
    Description: Public subnet 1 ID in Availability Zone 1
    Value: !Ref 'PublicSubnet1'
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet1ID'
  PublicSubnet1AZ:
    Description: Public subnet 1 Availability Zone
    Value: !Select
      - '0'
      - !Ref 'AvailabilityZones'
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet1AZ'
  PublicSubnet2CIDR:
    Description: Public subnet 2 CIDR in Availability Zone 2
    Value: !Ref 'PublicSubnet2CIDR'
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet2CIDR'
  PublicSubnet2ID:
    Description: Public subnet 2 ID in Availability Zone 2
    Value: !Ref 'PublicSubnet2'
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet2ID'
  PublicSubnet2AZ:
    Description: Public subnet 2 Availability Zone
    Value: !Select
      - '1'
      - !Ref 'AvailabilityZones'
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet2AZ'
  PublicSubnet3CIDR:
    Condition: 3ZCondition
    Description: Public subnet 3 CIDR in Availability Zone 3
    Value: !Ref 'PublicSubnet3CIDR'
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet3CIDR'
  PublicSubnet3ID:
    Condition: 3ZCondition
    Description: Public subnet 3 ID in Availability Zone 3
    Value: !Ref 'PublicSubnet3'
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet3ID'
  PublicSubnet3AZ:
    Condition: 3ZCondition
    Description: Public subnet 3 Availability Zone
    Value: !Select
      - '2'
      - !Ref 'AvailabilityZones'
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet3AZ'
  PublicSubnet4CIDR:
    Condition: 4ZCondition
    Description: Public subnet 4 CIDR in Availability Zone 4
    Value: !Ref 'PublicSubnet4CIDR'
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet4CIDR'
  PublicSubnet4ID:
    Condition: 4ZCondition
    Description: Public subnet 4 ID in Availability Zone 4
    Value: !Ref 'PublicSubnet4'
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet4ID'
  PublicSubnet4AZ:
    Condition: 4ZCondition
    Description: Public subnet 4 Availability Zone
    Value: !Select
      - '3'
      - !Ref 'AvailabilityZones'
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet4AZ'
  S3VPCEndpoint:
    Condition: PrivateSubnetsCondition
    Description: S3 VPC Endpoint
    Value: !Ref 'S3VPCEndpoint'
    Export:
      Name: !Sub '${AWS::StackName}-S3VPCEndpoint'
  PrivateSubnet1RouteTable:
    Condition: PrivateSubnetsCondition
    Value: !Ref 'PrivateSubnet1RouteTable'
    Description: Private subnet 1 route table
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnet1RouteTable'
  PrivateSubnet2RouteTable:
    Condition: PrivateSubnetsCondition
    Value: !Ref 'PrivateSubnet2RouteTable'
    Description: Private subnet 2 route table
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnet2RouteTable'
  PrivateSubnet3RouteTable:
    Condition: PrivateSubnets&3ZCondition
    Value: !Ref 'PrivateSubnet3RouteTable'
    Description: Private subnet 3 route table
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnet3RouteTable'
  PrivateSubnet4RouteTable:
    Condition: PrivateSubnets&4ZCondition
    Value: !Ref 'PrivateSubnet4RouteTable'
    Description: Private subnet 4 route table
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnet4RouteTable'
  PublicSubnetRouteTable:
    Value: !Ref 'PublicSubnetRouteTable'
    Description: Public subnet route table
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnetRouteTable'
  VPCCIDR:
    Value: !Ref 'VPCCIDR'
    Description: VPC CIDR
    Export:
      Name: !Sub '${AWS::StackName}-VPCCIDR'
  VPCID:
    Value: !Ref 'VPC'
    Description: VPC ID
    Export:
      Name: !Sub '${AWS::StackName}-VPCID'
